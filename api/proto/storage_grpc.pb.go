// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileStorage_StoreFile_FullMethodName    = "/storage.FileStorage/StoreFile"
	FileStorage_RetrieveFile_FullMethodName = "/storage.FileStorage/RetrieveFile"
)

// FileStorageClient is the client API for FileStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageClient interface {
	StoreFile(ctx context.Context, opts ...grpc.CallOption) (FileStorage_StoreFileClient, error)
	RetrieveFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (FileStorage_RetrieveFileClient, error)
}

type fileStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageClient(cc grpc.ClientConnInterface) FileStorageClient {
	return &fileStorageClient{cc}
}

func (c *fileStorageClient) StoreFile(ctx context.Context, opts ...grpc.CallOption) (FileStorage_StoreFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorage_ServiceDesc.Streams[0], FileStorage_StoreFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageStoreFileClient{stream}
	return x, nil
}

type FileStorage_StoreFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*StoreFileResponse, error)
	grpc.ClientStream
}

type fileStorageStoreFileClient struct {
	grpc.ClientStream
}

func (x *fileStorageStoreFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStorageStoreFileClient) CloseAndRecv() (*StoreFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStorageClient) RetrieveFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (FileStorage_RetrieveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorage_ServiceDesc.Streams[1], FileStorage_RetrieveFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageRetrieveFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileStorage_RetrieveFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileStorageRetrieveFileClient struct {
	grpc.ClientStream
}

func (x *fileStorageRetrieveFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileStorageServer is the server API for FileStorage service.
// All implementations must embed UnimplementedFileStorageServer
// for forward compatibility
type FileStorageServer interface {
	StoreFile(FileStorage_StoreFileServer) error
	RetrieveFile(*FileRequest, FileStorage_RetrieveFileServer) error
	mustEmbedUnimplementedFileStorageServer()
}

// UnimplementedFileStorageServer must be embedded to have forward compatible implementations.
type UnimplementedFileStorageServer struct {
}

func (UnimplementedFileStorageServer) StoreFile(FileStorage_StoreFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedFileStorageServer) RetrieveFile(*FileRequest, FileStorage_RetrieveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveFile not implemented")
}
func (UnimplementedFileStorageServer) mustEmbedUnimplementedFileStorageServer() {}

// UnsafeFileStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServer will
// result in compilation errors.
type UnsafeFileStorageServer interface {
	mustEmbedUnimplementedFileStorageServer()
}

func RegisterFileStorageServer(s grpc.ServiceRegistrar, srv FileStorageServer) {
	s.RegisterService(&FileStorage_ServiceDesc, srv)
}

func _FileStorage_StoreFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStorageServer).StoreFile(&fileStorageStoreFileServer{stream})
}

type FileStorage_StoreFileServer interface {
	SendAndClose(*StoreFileResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileStorageStoreFileServer struct {
	grpc.ServerStream
}

func (x *fileStorageStoreFileServer) SendAndClose(m *StoreFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStorageStoreFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStorage_RetrieveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStorageServer).RetrieveFile(m, &fileStorageRetrieveFileServer{stream})
}

type FileStorage_RetrieveFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileStorageRetrieveFileServer struct {
	grpc.ServerStream
}

func (x *fileStorageRetrieveFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// FileStorage_ServiceDesc is the grpc.ServiceDesc for FileStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.FileStorage",
	HandlerType: (*FileStorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreFile",
			Handler:       _FileStorage_StoreFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RetrieveFile",
			Handler:       _FileStorage_RetrieveFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}
