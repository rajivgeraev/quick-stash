// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageService_Store_FullMethodName    = "/storage.StorageService/Store"
	StorageService_Retrieve_FullMethodName = "/storage.StorageService/Retrieve"
	StorageService_Delete_FullMethodName   = "/storage.StorageService/Delete"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// Stores a file chunk.
	Store(ctx context.Context, opts ...grpc.CallOption) (StorageService_StoreClient, error)
	// Retrieves a file by its id.
	Retrieve(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (StorageService_RetrieveClient, error)
	// Deletes all chunks of a file by its id.
	Delete(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*DeleteReply, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (StorageService_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], StorageService_Store_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceStoreClient{stream}
	return x, nil
}

type StorageService_StoreClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*StoreReply, error)
	grpc.ClientStream
}

type storageServiceStoreClient struct {
	grpc.ClientStream
}

func (x *storageServiceStoreClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceStoreClient) CloseAndRecv() (*StoreReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) Retrieve(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (StorageService_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], StorageService_Retrieve_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_RetrieveClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type storageServiceRetrieveClient struct {
	grpc.ClientStream
}

func (x *storageServiceRetrieveClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) Delete(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, StorageService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	// Stores a file chunk.
	Store(StorageService_StoreServer) error
	// Retrieves a file by its id.
	Retrieve(*FileRequest, StorageService_RetrieveServer) error
	// Deletes all chunks of a file by its id.
	Delete(context.Context, *FileRequest) (*DeleteReply, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) Store(StorageService_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedStorageServiceServer) Retrieve(*FileRequest, StorageService_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedStorageServiceServer) Delete(context.Context, *FileRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).Store(&storageServiceStoreServer{stream})
}

type StorageService_StoreServer interface {
	SendAndClose(*StoreReply) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type storageServiceStoreServer struct {
	grpc.ServerStream
}

func (x *storageServiceStoreServer) SendAndClose(m *StoreReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceStoreServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).Retrieve(m, &storageServiceRetrieveServer{stream})
}

type StorageService_RetrieveServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type storageServiceRetrieveServer struct {
	grpc.ServerStream
}

func (x *storageServiceRetrieveServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Delete(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _StorageService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _StorageService_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _StorageService_Retrieve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}
